{"layout":"post","title":"How to create a Rest Resource in Drupal 8","description":"Explanation to create a custom Rest Resource in Drupal 8","categories":["articles"],"tags":["Drupal","Drupal Modules","Rest"],"draft":false,"body":"<p>One of the biggest changes in <a href=\"https://www.drupal.org/drupal-8.0\" target=\"_blank\">Drupal 8</a> is his integration with <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">RESTful</a>.</p>\n<p>Today I want to share with you how to create your own Rest Resources in a custom module to publish your website information using a RESTful API.</p>\n<p>I will create a new REST Resource with the objective to get the list of bundle types available for a specific entity.</p>\n<p>#Create a Module</p>\n<p>I will skip the explanation about how to create a Module in Drupal 8 because could be generated using the project <a href=\"http://drupalconsole.com/\" target=\"_blank\">Drupal Console</a> executing the following command.</p>\n<pre><code>$ php console.phar generate:module\n</code></pre><p>#Create a new REST Resource</p>\n<p>Assuming we create a new module named <strong>entity_rest_extra</strong> is required to create a class file <strong>EntityBundlesResource.php</strong> inside the module in a folder path <strong>src/Plugin/rest/resource</strong>.</p>\n<p>##Namespace</p>\n<p>The namespace for this new Rest Resource will be</p>\n<pre><code>namespace Drupal\\entity_rest_extra\\Plugin\\rest\\resource;\n</code></pre><p>##Libraries</p>\n<p>We must to use some dependencies to create the REST Resource, below the full list.</p>\n<pre><code>use Drupal\\Core\\Entity\\EntityManagerInterface;\nuse Drupal\\rest\\Plugin\\ResourceBase;\nuse Drupal\\rest\\ResourceResponse;\nuse Drupal\\Core\\Session\\AccountProxyInterface;\nuse Symfony\\Component\\DependencyInjection\\ContainerInterface;\nuse Symfony\\Component\\HttpKernel\\Exception\\HttpException;\nuse Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException;\nuse Psr\\Log\\LoggerInterface;\n</code></pre><p>##Annotations</p>\n<p>To enable the Discover for REST Resources found our new Rest Resource we must to implement the proper information in Annotation. check the following example.</p>\n<pre><code>/**\n * Provides a resource to get bundles by entity.\n *\n * @RestResource(\n *   id = &quot;entity_bundles&quot;,\n *   label = @Translation(&quot;Bundles by entities&quot;),\n *   uri_paths = {\n *     &quot;canonical&quot; = &quot;/bundles/{entity}&quot;\n *   }\n * )\n */\n</code></pre><p>As you can see we provide a Resource <strong>id</strong> with a <strong>label</strong>, also we define the <strong>canonical</strong> URL for our REST Resource with a parameter named <strong>entity</strong></p>\n<p>Using the annotation the Discover for Rest Resources will declare the routing dynamically so we donâ€™t need include a <strong>routing.yml</strong> file in our module.</p>\n<p>##Implement Class</p>\n<p>Now we have to create a class extending from <a href=\"https://api.drupal.org/api/drupal/core%21modules%21rest%21src%21Plugin%21ResourceBase.php/class/ResourceBase/8\" target=\"_blank\">ResourceBase</a> as you can see in the following snippet</p>\n<pre><code>class EntityBundlesResource extends ResourceBase {\n  /**\n   *  A curent user instance.\n   *\n   * @var \\Drupal\\Core\\Session\\AccountProxyInterface\n   */\n  protected $currentUser;\n  /**\n   *  A instance of entity manager.\n   *\n   * @var \\Drupal\\Core\\Entity\\EntityManagerInterface\n   */\n  protected $entityManager;\n}\n</code></pre><p>Our implementation require two properties for <strong>Current User</strong> and <strong>EntityManager</strong>.</p>\n<p>#Class Setup</p>\n<p>As you can imagine each class require a constructor and Drupal 8 is not the exception, but Drupal also implement\n<a href=\"http://www.phptherightway.com/pages/Design-Patterns.html\" target=\"_blank\">The Factory Pattern</a> to prepare the values to send to constructor.</p>\n<p>But is better to explain to you with the following example where we need to send the <a href=\"https://www.drupal.org/node/2133171\" target=\"_blank\">services</a>: <strong>Resource Format</strong>, <strong>Logger</strong>, <strong>Entity manager</strong> and <strong>Current User</strong> to the <strong>constructor</strong></p>\n<pre><code>/**\n   * {@inheritdoc}\n   */\n  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {\n    return new static(\n      $configuration,\n      $plugin_id,\n      $plugin_definition,\n      $container-&gt;getParameter(&#39;serializer.formats&#39;),\n      $container-&gt;get(&#39;logger.factory&#39;)-&gt;get(&#39;rest&#39;),\n      $container-&gt;get(&#39;entity.manager&#39;),\n      $container-&gt;get(&#39;current_user&#39;)\n    );\n  }\n</code></pre><p>Now we need to define the constructor where we are receiving the values from the create method, as you can see below.</p>\n<pre><code>/**\n  * Constructs a Drupal\\rest\\Plugin\\ResourceBase object.\n  *\n  * @param array $configuration\n  *   A configuration array containing information about the plugin instance.\n  * @param string $plugin_id\n  *   The plugin_id for the plugin instance.\n  * @param mixed $plugin_definition\n  *   The plugin implementation definition.\n  * @param array $serializer_formats\n  *   The available serialization formats.\n  * @param \\Psr\\Log\\LoggerInterface $logger\n  *   A logger instance.\n  */\n  public function __construct(\n    array $configuration,\n    $plugin_id,\n    $plugin_definition,\n    array $serializer_formats,\n    LoggerInterface $logger,\n    EntityManagerInterface $entity_manager,\n    AccountProxyInterface $current_user) {\n    parent::__construct($configuration, $plugin_id, $plugin_definition, $serializer_formats, $logger);\n\n    $this-&gt;entityManager = $entity_manager;\n    $this-&gt;currentUser = $current_user;\n  }\n</code></pre><p>#Implement REST method</p>\n<p>Last but not least we have to define the RESTful state we want to implement, in my example I want to implement a GET method to response according the parameters.</p>\n<p>Inside the class with have to create a method matching the RESTful state name, so for GET we have to implement a method named <strong>get</strong> as you can see in the following snippet.</p>\n<pre><code>  /*\n   * Responds to GET requests.\n   *\n   * Returns a list of bundles for specified entity.\n   *\n   * @return \\Drupal\\rest\\ResourceResponse\n   *   The response containing a list of bundle names.\n   *\n   * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException\n   */\n  public function get($entity = NULL) {\n    if ($entity) {\n      $permission = &#39;Administer content types&#39;;\n      if(!$this-&gt;currentUser-&gt;hasPermission($permission)) {\n        throw new AccessDeniedHttpException();\n      }\n      $bundles_entities = \\Drupal::entityManager()-&gt;getStorage($entity .&#39;_type&#39;)-&gt;loadMultiple();\n      $bundles = array();\n      foreach ($bundles_entities as $entity) {\n        $bundles[$entity-&gt;id()] = $entity-&gt;label();\n      }\n      if (!empty($bundles)) {\n        return new ResourceResponse($bundles);\n      }\n      throw new NotFoundHttpException(t(&#39;Bundles for entity @entity were not found&#39;, array(&#39;@entity&#39; =&gt; $entity)));\n    }\n\n    throw new HttpException(t(&#39;Entity wasn\\&#39;t provided&#39;));\n  }\n</code></pre><p>As you can see the method receive as parameter the last value pass to URL.</p>\n<p>Also using the <a href=\"https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Session%21AccountProxyInterface.php/interface/AccountProxyInterface/8\" target=\"_blank\">Account Proxy Interface</a> we can determine if Current User has enough rights to get the bundle list.</p>\n<p>The <a href=\"https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Entity%21EntityManagerInterface.php/interface/EntityManagerInterface/8\" target=\"_blank\">Entity Manager Interface</a> allow us to we get the list of bundles for Entity requested.</p>\n<p>After that we prepare an array with the results, these results will be transformed to the proper format requested by the user using the class <a href=\"https://api.drupal.org/api/drupal/core%21modules%21rest%21src%21ResourceResponse.php/class/ResourceResponse/8\" target=\"_blank\">ResourceResponse</a>, in our case we will request a json response.</p>\n<p>If you want to implement RESTful state POST just add a method <strong>post</strong></p>\n<p>You can see a full and functional custom REST Resources at <a href=\"https://github.com/enzolutions/entity_rest_extra\" target=\"_blank\">https://github.com/enzolutions/entity_rest_extra</a></p>\n<p>#Using our new Resource</p>\n<p>Using the contrib module <a href=\"https://www.drupal.org/project/restui/git-instructions\" target=\"_blank\">Rest UI</a> (I recommend to use the git version until Drupal 8 get a first release) you can enable your custom Rest Resource.</p>\n<p>This module enable a UI to set the Authentication and format for each RESTful method implemented as you can see in the following image.</p>\n<p><img src=\"{{site.url}}/assets/img/restui_bundle_entities_settings.png\"/></p>\n<p>Using this setting the access to Resource will be granted or denied.</p>\n<p>Using the Chrome Application <a href=\"https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm\">Postman - REST Client</a> you can execute an authenticated request to URL <strong><a href=\"http://example.com/bundles/node\">http://example.com/bundles/node</a></strong> as you can see in the following image.</p>\n<p><img src=\"{{site.url}}/assets/img/postman_rest_request.png\"/></p>\n<p>If all is working as expected you will get a similar result to next json output.</p>\n<pre><code>{\n  &quot;article&quot;: &quot;Article&quot;,\n  &quot;page&quot;: &quot;Basic page&quot;\n}\n</code></pre><p>I hope you find this blog entry usefull.</p>\n","updatedAt":"2017-09-05T17:40:56.000Z"}
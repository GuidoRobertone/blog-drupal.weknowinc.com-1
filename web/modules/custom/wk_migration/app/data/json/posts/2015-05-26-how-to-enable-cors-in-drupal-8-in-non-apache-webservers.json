{"layout":"post","title":"How to enable CORS in Drupal 8 in non Apache webservers","categories":["articles"],"tags":["Drupal8","Drupal","CORS"],"body":"<p>As you maybe know <a href=\"https://www.drupal.org/drupal-8.0\">Drupal 8</a> is almost ready to be released, could be in next\n<a href=\"https://events.drupal.org/barcelona2015\">DrupalCon Europe</a> held in Barcelona.</p>\n<p>However if you are interested in CORS applications you must to wait until Drupal 8.1 to get native support to CORS in Drupal\nmore information at <a href=\"https://www.drupal.org/node/1869548#comment-9365043\">issue</a>.</p>\n<p>Long time ago I wrote the article <a href=\"{{site.url }}/articles/2014/09/08/how-to-enable-cors-requests-against-drupal-8/\">How to enable CORS requests against Drupal 8</a>\nbut that approach only works in environments using Apache Web Server, but in servers using a non Apache web server like\n <a href=\"http://nginx.org/\">Ngix</a> that solution is useless. Today I face that problem in <a href=\"https://pantheon.io\">Pantheon</a>.</p>\n<p>Therefore, I implemented a solution hacking the file index.php to enable CORS. Let me split the change in two stages.</p>\n<p>Firstly we have to guarantee the REST method OPTIONS return the proper value, because Drupal 8 canâ€™t handle that request right now, check the code to implement that</p>\n<pre><code>  if ($_SERVER[&#39;REQUEST_METHOD&#39;] == &#39;OPTIONS&#39;) {\n    $response = new Response(200);\n    $response-&gt;headers-&gt;set(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n    $response-&gt;headers-&gt;set(&#39;Access-Control-Allow-Methods&#39;, &#39;POST, GET, OPTIONS, PATCH, DELETE&#39;);\n    $response-&gt;headers-&gt;set(&#39;Access-Control-Allow-Headers&#39;, &#39;Authorization&#39;);\n    $response-&gt;send();\n    exit;\n  }\n</code></pre><p>Secondly, we have to modify normal requests to enable remote requests from any source desired, as you can see in the following snippet of code</p>\n<pre><code>  $response = $kernel\n      -&gt;handle($request)\n      // Handle the response object.\n      -&gt;prepare($request);\n\n  // Enable CORS requests, Change &#39;*&#39; for any specific domain or ip address\n  $response-&gt;headers-&gt;set(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);\n  $response-&gt;headers-&gt;set(&#39;Access-Control-Allow-Methods&#39;, &#39;POST, GET, OPTIONS, PATCH, DELETE&#39;);\n  $response-&gt;headers-&gt;set(&#39;Access-Control-Allow-Headers&#39;, &#39;Authorization&#39;);\n</code></pre><p>You can apply this <a href=\"{{site.url}}/assets/attaches/d8-cors-index.patch.txt\">patch</a> against Drupal 8 beta 10.</p>\n<p>I know there are initiatives to enable this feature using contributed modules, but meanwhile we get a definite solution, \nthis is temporary solution flexible enough using Drupal 8 style to start using Drupal as backend in a Decoupled solution.</p>\n<p>I hope you found this post useful. </p>\n","updatedAt":"2017-09-05T17:40:56.000Z"}
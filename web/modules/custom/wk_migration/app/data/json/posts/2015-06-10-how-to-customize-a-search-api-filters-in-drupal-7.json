{
  "layout":"post",
  "title":"How to customize a Search API filters in Drupal 7",
  "categories":["articles"],
  "tags":["Drupal",null,"Search API"],
  "body":"<p>Last week I show you <a href=\"{{site.url }}/articles/2015/06/02/how-to-add-customs-fields-to-solr-index-using-entity-api-amp-search-api/\">How to add customs fields to SOLR index using Entity API &amp; Search API</a>, \ncontinues with that line of concept I will to show you how to manipulate a Search API query to include a custom logic in \nyour queries.</p>\n<p>Firstly, let imagine an hypothetical scenario when we need to run a different query for anonymous and registered users.</p>\n<p>Using the custom fields created in previous referenced above we will show todayâ€™s list of events, in the other hand for \nregistered users we will show events in progress (including multi day events) and events coming soon.</p>\n<p>#Alter Search API query.</p>\n<p>To modify our queries we will use hook <a href=\"http://www.drupalcontrib.org/api/drupal/contributions!search_api!search_api.api.php/function/hook_search_api_query_alter/7\">hook_search_api_query_alter()</a> \nas you can see in the following example</p>\n<pre><code>function MYMODULE_search_api_query_alter(SearchApiQueryInterface $query) {\n  global $user;\n  // Filter from where the Search API query will be trigger \n  if(arg(0) == &#39;events&#39; &amp;&amp; arg(1) == &#39;list&#39;) {\n\n    $start_day = strtotime(date(&#39;Y-m-d&#39;));\n\n    if($user-&gt;uid == 0 ) {\n      $query-&gt;condition(&#39;event_start_day&#39;, $start_day, &#39;&lt;=&#39;);\n      $query-&gt;condition(&#39;event_end_day&#39;, $start_day, &#39;&gt;=&#39;);\n    }\n    else {\n      // Select events in progress\n      $left_filter = $query-&gt;createFilter(&#39;AND&#39;);\n      $left_filter-&gt;condition(&#39;event_start_day&#39;, $start_day, &#39;&lt;=&#39;);\n      $left_filter-&gt;condition(&#39;event_end_day&#39;, $start_day, &#39;&gt;=&#39;);\n\n      // Select events with a start date in the future\n      $right_filter = $query-&gt;createFilter(&#39;AND&#39;);\n      $right_filter-&gt;condition(&#39;event_start_day&#39;, time(), &#39;&gt;=&#39;);\n\n      $main_filter = $query-&gt;createFilter(&#39;OR&#39;);\n      $main_filter-&gt;filter($left_filter);\n      $main_filter-&gt;filter($right_filter);\n\n      $query-&gt;filter($main_filter);\n     }\n}\n</code></pre><p>Let dissect the previous piece of code. If user is anonymous we will <a href=\"http://www.drupalcontrib.org/api/drupal/contributions%21search_api%21includes%21query.inc/function/SearchApiQueryInterface%3A%3Acondition/7\">SearchApiQueryInterface::condition</a> method \nto include new filters to determine events who are happening today, even though if those events are multi day events.</p>\n<p>In the case of registered users, the same method is used but with a subtle variation. By default all conditions are added \nusing an <strong>AND</strong> operator which is fine most of the times. However, in our case is required include to groups of validation \nin same query for that reason an <strong>OR</strong> operator is required.</p>\n<p>Using the <a href=\"http://www.drupalcontrib.org/api/drupal/contributions%21search_api%21includes%21query.inc/function/SearchApiQueryInterface%3A%3AcreateFilter/7\">SearchApiQueryInterface::createFilter</a> is \npossible create groups of filters using AND or OR operator.</p>\n<p>In addition, using <a href=\"http://www.drupalcontrib.org/api/drupal/contributions%21search_api%21includes%21query.inc/function/SearchApiQueryInterface%3A%3Afilter/7\">SearchApiQueryInterface::filter</a> is possible \ninclude those group of filters inside a <strong>SearchApiQueryInterface</strong> object.</p>\n<p>In summary the snippet of code above create a filter similar to</p>\n<pre><code>(event_start_day &lt;= time() AND event_end_day &gt;= time()) OR (event_start_day &gt;= time())\n</code></pre><p>You can create any combination of filters required in your logic.</p>\n<p>I hope you found this article useful.</p>\n","updatedAt":"2017-09-05T17:40:56.000Z"}

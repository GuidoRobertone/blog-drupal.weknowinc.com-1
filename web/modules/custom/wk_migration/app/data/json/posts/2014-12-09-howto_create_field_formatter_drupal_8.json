{"layout":"post","title":"How to create a Field Formatter in Drupal 8","description":"Explanation to create a custom Field Formatter in Drupal 8","categories":["articles"],"tags":["Drupal","Drupal Modules"],"draft":false,"body":"<p>One of the biggest changes in <a href=\"https://www.drupal.org/drupal-8.0\" target=\"_blank\">Drupal 8</a> is his integration with <a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">RESTful</a>.</p>\n<p>Because now Views lives in Core you can create a view with JSON response in few minutes, you just need enable modules <strong>Views</strong>, <strong>Views UI</strong> and <strong>RESTful Web Services</strong></p>\n<p>The problem I found with image is the formatter for image is not compatible with RESTful responses due the output of Image formatter is HTML.</p>\n<h1 id=\"create-a-view\">Create a View</h1>\n<p>Let me explain the situation if you create a view with a <strong>Rest Export</strong> display you can select what fields of your entity you want to render.</p>\n<p>Now if you choose an image field the default format is Image as you can see in the following snapshot.</p>\n<p><img src=\"{{site.url}}/assets/img/image_field_formatter.png\"/></p>\n<p>Even if you donâ€™t set the option to link to original image you will get the image in HTML format as you see in the following sample of JSON response.</p>\n<pre><code>[\n  {\n    title: &quot;Image sample # 3&quot;,\n    field_image: &quot; &lt;img src=&quot;http://example.com/sites/default/files/styles/thumbnail/public/field/image/globe.jpg?itok=wmu3VCr6&quot; width=&quot;100&quot; height=&quot;75&quot; alt=&quot;&quot; typeof=&quot;foaf:Image&quot; class=&quot;image-style-thumbnail&quot; /&gt; &quot;\n  },\n  {\n    title: &quot;Image sample # 2&quot;,\n    field_image: &quot; &lt;img src=&quot;http://example.com/sites/default/files/styles/thumbnail/public/field/image/sample_08.jpg?itok=X9N005N1&quot; width=&quot;100&quot; height=&quot;75&quot; alt=&quot;&quot; typeof=&quot;foaf:Image&quot; class=&quot;image-style-thumbnail&quot; /&gt; &quot;\n  },\n  {\n    title: &quot;Image sample # 1&quot;,\n    field_image: &quot; &lt;img src=&quot;http://d$/sites/default/files/styles/thumbnail/public/field/image/sample_01.jpg?itok=UD1-QXTj&quot; width=&quot;100&quot; height=&quot;75&quot; alt=&quot;&quot; typeof=&quot;foaf:Image&quot; class=&quot;image-style-thumbnail&quot; /&gt; &quot;\n  }\n]\n</code></pre><p>The previous output was generated by a view selecting articles with images, if you want import this view in your system just download the file <a href=\"{{site.url}}/assets/attaches/view_image_list.yml\" target=\"_blank\">views_list.yml</a> and import using the Configuration Management of Drupal accessing the URL <strong><a href=\"http://example.com/admin/config/development/configuration/single/import\">http://example.com/admin/config/development/configuration/single/import</a></strong> in your Drupal install as you can see in the following image.</p>\n<p><img src=\"{{site.url}}/assets/img/configuration_management_view_import.png\"/></p>\n<p>If you want read more about Configuration Management in Drupal 8 you can read the post entry <a href=\"{{site.url}}/articles/2014/08/27/understanding-configuration-management-in-drupal-8/\">Understanding Configuration Management in Drupal 8</a></p>\n<p>To resolve this problem I will show you how to create your own Field Formatter to meet your needs.</p>\n<p>#Create a Module</p>\n<p>I will skip the explanation about how to create a Module in Drupal 8 because could be generated using the project <a href=\"http://drupalconsole.com/\" target=\"_blank\">Drupal Console</a> executing the following command.</p>\n<pre><code>$ php console.phar generate:module\n</code></pre><p>#Create a new Field Formatter</p>\n<p>If you want to create a new custom Field Formatter is require to add a new class file located inside your module in the following path</p>\n<pre><code>YOUR_MODULE/src/Plugin/Field/FieldFormatter/\n</code></pre><p>Inside this folder you must create a class file per each Field Formatter do you want to create.</p>\n<p>I will create a new file named <strong>ImageRawFormatter.php</strong>, I will explain each part of this file</p>\n<p>##Field Formatter Metadata</p>\n<p>Before to start to code we must to define some stuff required for a proper function.</p>\n<p>###Namespace</p>\n<p>We have to define what will be Namespace for your Field Formatter</p>\n<pre><code>namespace Drupal\\image_raw_formatter\\Plugin\\Field\\FieldFormatter;\n</code></pre><p>Drupal 8 implement <a href=\"http://www.php-fig.org/psr/psr-4/\" target=\"_blank\">PSR-4</a> from  <a href=\"http://www.php-fig.org/\" target=\"_blank\">PHP Framework Interop Group</a></p>\n<p>This specification follow the following pattern</p>\n<pre><code>\\&lt;NamespaceName&gt;(\\&lt;SubNamespaceNames&gt;)*\\&lt;ClassName&gt;\n</code></pre><p>In our case the division will be</p>\n<ul>\n<li><strong>NamespaceName</strong>: Drupal</li>\n<li><strong>SubNamespaceNames</strong>: image_raw_formatter\\Plugin\\Field\\FieldFormatter</li>\n<li><strong>ClassName</strong>: ImageRawFormatter</li>\n</ul>\n<p>##Libraries required</p>\n<p>In this specific case we have to define where are classes we require to create our Field Formatter.</p>\n<p>Drupal 8 use Autoloader class but we need to inform where they are using the intruction <strong>use</strong>.</p>\n<pre><code>use Drupal\\image\\Plugin\\Field\\FieldFormatter\\ImageFormatterBase;\nuse Drupal\\image\\Entity\\ImageStyle;\nuse Drupal\\Core\\Form\\FormStateInterface;\nuse Drupal\\Core\\Field\\FieldItemListInterface;\nuse \\InvalidArgumentException;\n</code></pre><p>###Annotations</p>\n<p>Drupal 8 have several discovers to detect specific implementation, for instance we have a Discover to detect all Field Formatter declared in our application and the way to declare a new Field Formatter is using <a href=\"https://wiki.php.net/rfc/annotations\" target=\"_blank\">Annotations</a>.</p>\n<p>Below you can find an annotation example for Field Formatter</p>\n<pre><code>/**\n * Plugin implementation of the &#39;image_raw_formatter&#39; formatter.\n *\n * @FieldFormatter(\n *   id = &quot;image_raw_formatter&quot;,\n *   label = @Translation(&quot;Image Raw&quot;),\n *   field_types = {\n *     &quot;image&quot;\n *   }\n * )\n */\n</code></pre><p>As you can see we must define an unique <strong>id</strong> with a <strong>label</strong> with translation and we must define for which field types this Field Formatter will be available.</p>\n<p>##Implement Class</p>\n<p>Now we have to create a class extending from <a href=\"https://api.drupal.org/api/drupal/core%21modules%21image%21src%21Plugin%21Field%21FieldFormatter%21ImageFormatterBase.php/class/ImageFormatterBase/8\">ImageFormatterBase</a> as you can see in the following snippet</p>\n<pre><code>class ImageRawFormatter extends ImageFormatterBase\n{\n}\n</code></pre><p>###Settings Form</p>\n<p>Now we have to add a method <strong>settingsForm</strong> to define the Setting options for our Formatter. check the following implementation.</p>\n<pre><code>/**\n   * {@inheritdoc}\n   */\n  public function settingsForm(array $form, FormStateInterface $form_state) {\n    $image_styles = image_style_options(FALSE);\n    $element[&#39;image_style&#39;] = array(\n      &#39;#title&#39; =&gt; t(&#39;Image style&#39;),\n      &#39;#type&#39; =&gt; &#39;select&#39;,\n      &#39;#default_value&#39; =&gt; $this-&gt;getSetting(&#39;image_style&#39;),\n      &#39;#empty_option&#39; =&gt; t(&#39;None (original image)&#39;),\n      &#39;#options&#39; =&gt; $image_styles,\n    );\n    return $element;\n  }\n</code></pre><p>The implementation above allow user select a specific image style to be returned or just return the original image.</p>\n<p>###Summary Report</p>\n<p>Is important to inform to end users current setting of formatter, to enable that we have to implement the method <strong>settingsSummary</strong></p>\n<pre><code>/**\n   * {@inheritdoc}\n   */\n  public function settingsSummary() {\n    $summary = array();\n    $image_styles = image_style_options(FALSE);\n    // Unset possible &#39;No defined styles&#39; option.\n    unset($image_styles[&#39;&#39;]);\n    // Styles could be lost because of enabled/disabled modules that defines\n    // their styles in code.\n    $image_style_setting = $this-&gt;getSetting(&#39;image_style&#39;);\n    if (isset($image_styles[$image_style_setting])) {\n      $summary[] = t(&#39;Image style: @style&#39;, array(&#39;@style&#39; =&gt; $image_styles[$image_style_setting]));\n    }\n    else {\n      $summary[] = t(&#39;Original image&#39;);\n    }\n    return $summary;\n  }\n</code></pre><p>As you can see the method above just read the current settings and render an output.</p>\n<p>###Render Field Formatter</p>\n<p>At the end we need to define the how we want to render the field based in current Field Formatter settings, we have to implement the method <strong>viewElements</strong> as you can see in the following snippet.</p>\n<pre><code>/**\n   * {@inheritdoc}\n   */\n  public function viewElements(FieldItemListInterface $items) {\n    $elements = array();\n    $image_style_setting = $this-&gt;getSetting(&#39;image_style&#39;);\n\n    // Determine if Image style is required.\n    $image_style = NULL;\n    if (!empty($image_style_setting)) {\n      $image_style = entity_load(&#39;image_style&#39;, $image_style_setting);\n    }\n    foreach ($items as $delta =&gt; $item) {\n      if ($item-&gt;entity) {\n        $image_uri = $item-&gt;entity-&gt;getFileUri();\n        // Get image style URL\n        if ($image_style) {\n          $image_uri = ImageStyle::load($image_style-&gt;getName())-&gt;buildUrl($image_uri);\n        } else {\n          // Get absolute path for original image\n          $image_uri = $item-&gt;entity-&gt;url();\n        }\n        $elements[$delta] = array(\n          &#39;#markup&#39; =&gt; $image_uri,\n        );\n      }\n    }\n    return $elements;\n  }\n</code></pre><p>If you read the logic only determine if the configuration require use any image style or if is only required the original image, in both sceneries the proper path url is return.</p>\n<p>We donâ€™t need any transformation to JSON because that is handled by view Display selected.</p>\n<p>#Module usage</p>\n<p>After enable our custom module we just need edit our view and edit the field to use new Raw Formatter as you can see in the following image.</p>\n<p><img src=\"{{site.url}}/assets/img/image_field_raw_formatter.png\"/></p>\n<p>After save the view and run again the output will be totally different and perfect to use in RESTful services to avoid HTML parsing to extract the image path. check the output example below.</p>\n<pre><code>[\n  {\n    title: &quot;Image sample # 3&quot;,\n    field_image: &quot;http://drupal8b3.dev/sites/default/files/styles/thumbnail/public/field/image/globe.jpg?itok=wmu3VCr6&quot;\n  },\n  {\n    title: &quot;Image sample # 2&quot;,\n    field_image: &quot;http://drupal8b3.dev/sites/default/files/styles/thumbnail/public/field/image/sample_08.jpg?itok=X9N005N1&quot;\n  },\n  {\n    title: &quot;Image sample # 1&quot;,\n    field_image: &quot;http://drupal8b3.dev/sites/default/files/styles/thumbnail/public/field/image/sample_01.jpg?itok=UD1-QXTj&quot;\n  }\n]\n</code></pre><p>You can download a full implementation of this custom Image Raw Field Formatter at <a href=\"https://github.com/enzolutions/image_raw_formatter\" target=\"_blank\">https://github.com/enzolutions/image_raw_formatter</a>.</p>\n<p>I expect you found this blog entry useful.</p>\n","updatedAt":"2017-09-05T17:40:56.000Z"}